@page "/cryptpage"
@using NYSS_CourseWork.Scrambler
@using NYSS_CourseWork.WebApp.Data

<h1>CryptApp</h1>

@if (InputChoise == BranchingEnums.InputChoise.none)
{
    <p>
        Как вы хотите задать данные: <button class="btn btn-primary" @onclick="ChangeInputTxt">Из текстового файла</button>
        <button class="btn btn-primary" @onclick="ChangeInputKeyboard">С клавиатуры</button>
    </p>
}
@if (InputChoise == BranchingEnums.InputChoise.fromKeyboard)
{
    <p>
        Введите текст:<input @bind="Text" @bind:event="oninput" />
    </p>
}
@if (InputChoise == BranchingEnums.InputChoise.fromTxt)
{
    <p>
        Введите путь к файлу:<input @bind="FilePath" @bind:event="oninput" />
        <button class="btn btn-primary" @onclick="InputFromFile">ок</button>
    </p>

}
@if (InputChoise != BranchingEnums.InputChoise.none)
{
    <p>
        Вы хотите: <button class="btn btn-primary" @onclick="ChangeEncrypt">Зашифровать.</button>
        <button class="btn btn-primary" @onclick="ChangeDecrypt">Расшифровать.</button>
    </p>
}
@if (DecryptOrEncrypt != BranchingEnums.CryptFunc.none)
{
    <p>
        Введите другой ключ или ничего не меняйте:<input @bind="Key" @bind:event="oninput" />
    </p>
    <p>
        Приступим?: <button class="btn btn-primary" @onclick="Run">Полетели!</button>
    </p>
    @if (!String.IsNullOrEmpty(Result))
    {
        <p>
            Как вы хотите получить готовые данные: <button class="btn btn-primary" @onclick="ChangeOutputTxt">Сохранить в текстовый файл.</button>
            <button class="btn btn-primary" @onclick="ChangeOutputMonitor">Вывести на экран.</button>
        </p>
    }
    else
    {
        <p>Пожалуйста подождите...</p>
    }
}
@if (OutputChoise == BranchingEnums.OutputVar.onMonitor)
{
    <p>
        <h5>Вывод:</h5>
        <textarea readonly="readonly" style="width: 100%; max-height: 300px; height: 300px;">@Result</textarea>
    </p>
}
@if (OutputChoise == BranchingEnums.OutputVar.outTxt)
{
    <p>
        Введите путь к файлу:<input @bind="FilePath" @bind:event="oninput" />
        <button class="btn btn-primary" @onclick="InputOnFile">ок</button>
    </p>

}

@code {
    private BranchingEnums.InputChoise InputChoise { get; set; } = BranchingEnums.InputChoise.none;
    private BranchingEnums.OutputVar OutputChoise { get; set; } = BranchingEnums.OutputVar.none;
    private BranchingEnums.CryptFunc DecryptOrEncrypt { get; set; } = BranchingEnums.CryptFunc.none;
    private string FilePath { get; set; }
    private string Text { get; set; }
    private string Result { get; set; }
    private string Key { get; set; } = "группакрови";

    private async Task InputFromFile()
    {
        FileManagerController newManager = new FileManagerController();
        Text = await newManager.ReadTxtFile(FilePath);
        Text = Text.ToString();
    }
    private async Task InputOnFile()
    {
        FileManagerController newManager = new FileManagerController();
        await newManager.SaveTxtFile(FilePath, Result);
    }

    private void ChangeInputTxt()
    {
        InputChoise = BranchingEnums.InputChoise.fromTxt;
    }
    private void ChangeInputKeyboard()
    {
        InputChoise = BranchingEnums.InputChoise.fromKeyboard;
    }
    private void ChangeEncrypt()
    {
        DecryptOrEncrypt = BranchingEnums.CryptFunc.encrypt;
    }
    private void ChangeDecrypt()
    {
        DecryptOrEncrypt = BranchingEnums.CryptFunc.decrypt;
    }

    private void ChangeOutputTxt()
    {
        OutputChoise = BranchingEnums.OutputVar.outTxt;
    }
    private void ChangeOutputMonitor()
    {
        OutputChoise = BranchingEnums.OutputVar.onMonitor;
    }

    private async Task Run()
    {
        ScramblerMaster newMaster = new ScramblerMaster();

        if (DecryptOrEncrypt == BranchingEnums.CryptFunc.decrypt)
        {
            Result = await newMaster.GetDecryption(Key, Text, new RussianAlphabet());
        }
        if (DecryptOrEncrypt == BranchingEnums.CryptFunc.encrypt)
        {
            Result = await newMaster.GetEncryption(Key, Text, new RussianAlphabet());
        }
    }
}
